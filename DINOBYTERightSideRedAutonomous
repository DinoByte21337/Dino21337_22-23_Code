package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.DcMotor;

@Autonomous(name = "DINOBYTERightSideRedAutonomous (Blocks to Java)")
public class DINOBYTERightSideRedAutonomous extends LinearOpMode {

  private DcMotor backLeft;
  private DcMotor frontRight;
  private DcMotor frontLeft;
  private DcMotor backRight;
  private DcMotor topMotor;

  /**
   * This function is executed when this Op Mode is selected from the Driver Station.
   */
  @Override
  public void runOpMode() {
    backLeft = hardwareMap.get(DcMotor.class, "backLeft");
    frontRight = hardwareMap.get(DcMotor.class, "frontRight");
    frontLeft = hardwareMap.get(DcMotor.class, "frontLeft");
    backRight = hardwareMap.get(DcMotor.class, "backRight");
    topMotor = hardwareMap.get(DcMotor.class, "topMotor");

    // Put initialization blocks here.
    waitForStart();
    if (opModeIsActive()) {
      // Put loop blocks here.
      telemetry.update();
      Move(0.75, 0, 0, 0, 0, 0, 0.5);
    }
  }

  /**
   * Describe this function...
   */
  private void Move(double Forward, int Strafe, int Turing, int Arm, int rightClaw2, int leftClaw2, double Time) {
    double backLeft2;
    double frontRight2;
    double frontLeft2;
    double backRight2;

    backLeft2 = -Forward + (Strafe - Turing);
    frontRight2 = (Forward - Strafe) - Turing;
    frontLeft2 = (-Forward - Strafe) - Turing;
    backLeft2 = (Forward + Strafe) - Turing;
    Arm = 0;
    leftClaw2 = 0;
    rightClaw2 = 0;
    backLeft.setPower(backLeft2);
    frontRight.setPower(frontRight2);
    frontLeft.setPower(frontLeft2);
    backRight.setPower(backRight2);
    topMotor.setPower(Arm);
    sleep(1000);
    backLeft.setPower(0);
    backRight.setPower(0);
    frontLeft.setPower(0);
    frontRight.setPower(0);
    sleep(200);
  }
}
